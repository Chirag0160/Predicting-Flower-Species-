# -*- coding: utf-8 -*-
"""ML TASK1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19f5w0Gli_Z3zxjr1cUx8BK97KrZoBjQt
"""

# Commented out IPython magic to ensure Python compatibility.
#Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
# %matplotlib inline
from sklearn.metrics import mean_squared_error , accuracy_score,classification_report, confusion_matrix, r2_score
from sklearn.inspection import permutation_importance
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC

#Load the dataset
iris_df = pd.read_csv("iris.data")

print(iris_df)

iris_df.head()

iris_df.tail()

iris_df.shape

iris_df.describe()

iris_df.isnull().sum()

iris_df.value_counts(normalize=True)

X_train , X_test , y_train , y_test = train_test_split(X , Y ,test_size = 0.30 , random_state = 6)

iris_svc = SVC()
iris_svc.fit(X_train , y_train)
SVC()

iris_svc_predict = iris_svc.predict(X_test)

iris_accuracy_svc = accuracy_score(y_test, iris_svc_predict)
print("Accuracy:", iris_accuracy_svc* 100, '%')

for i in range(len(y_test)):
 print("Actual:", y_test.iloc[i], " , Predicted:",
iris_svc_predict[i])

print(classification_report(y_test, iris_svc_predict))

print(confusion_matrix(y_test, iris_svc_predict))

#Predictions using the logistic regression model
from sklearn.linear_model import LogisticRegression
iris_log = LogisticRegression()

iris_log.fit(X_train , y_train)
LogisticRegression()

iris_log_predict = iris_log.predict(X_test)

iris_accuracy_log = accuracy_score(y_test, iris_log_predict)
print("Accuracy:", iris_accuracy_log* 100, '%')

for i in range(len(y_test)):
 print("Actual:", y_test.iloc[i], " , Predicted:",
iris_log_predict[i])

#Predictions using the Decision Tree Classifier model
from sklearn.tree import DecisionTreeClassifier
iris_dtc = DecisionTreeClassifier()

iris_dtc.fit(X_train , y_train)
DecisionTreeClassifier()

iris_dtc_predict = iris_dtc.predict(X_test)

iris_accuracy_dtc = accuracy_score(y_test, iris_dtc_predict)
print("Accuracy:", iris_accuracy_dtc* 100, '%')

for i in range(len(y_test)):
 print("Actual:", y_test.iloc[i], " , Predicted:",
iris_dtc_predict[i])